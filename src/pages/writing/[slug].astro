---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';

interface Props {
	entry: CollectionEntry<'writing'>;
}

export async function getStaticPaths() {
	const writing = await getCollection('writing', ({ data }) => {
		// In production, filter out drafts
		if (import.meta.env.PROD) {
			return !data.draft;
		}
		// In development, show all posts including drafts
		return true;
	});

	return writing.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

function formatDate(date: Date): string {
	return date.toLocaleDateString('en-US', {
		year: 'numeric',
		month: 'long',
		day: 'numeric'
	});
}
---

<BaseLayout title={`${entry.data.title} | Johannes Fahrenkrug`} description={entry.data.description}>
	<div class="stack gap-20">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/writing/"><Icon icon="arrow-left" /> Writing</a>
					<Hero title={entry.data.title} align="start">
						<div class="details">
							<div class="article-meta">
								<time class="article-date" datetime={entry.data.date.toISOString()}>
									Published {formatDate(entry.data.date)}
								</time>
								{entry.data.updated && (
									<time class="article-updated" datetime={entry.data.updated.toISOString()}>
										Updated {formatDate(entry.data.updated)}
									</time>
								)}
								{entry.data.draft && (
									<span class="draft-badge">Draft</span>
								)}
							</div>
							{entry.data.tags && entry.data.tags.length > 0 && (
								<div class="tags">
									{entry.data.tags.map((tag) => (
										<span class="tag">{tag}</span>
									))}
								</div>
							)}
							<p class="description">{entry.data.description}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
				<div class="stack gap-10 content">
					<div class="article-content">
						<Content />
					</div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
		color: var(--gray-300);
		text-decoration: none;
		font-size: var(--text-sm);
		font-weight: 500;
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		transition: color var(--theme-transition);
	}

	.back-link:hover {
		color: var(--gray-0);
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		align-items: flex-start;
	}

	.article-meta {
		display: flex;
		align-items: center;
		gap: 1rem;
		flex-wrap: wrap;
	}

	.article-date {
		font-size: var(--text-sm);
		color: var(--gray-400);
		font-family: var(--font-brand);
	}

	.article-updated {
		font-size: var(--text-sm);
		color: var(--accent-regular);
		font-family: var(--font-brand);
		font-weight: 500;
	}

	.draft-badge {
		background: var(--gray-700);
		color: var(--gray-200);
		padding: 0.25rem 0.5rem;
		border-radius: 0.375rem;
		font-size: var(--text-xs);
		font-weight: 500;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.tag {
		background: var(--gray-800);
		color: var(--gray-300);
		padding: 0.25rem 0.75rem;
		border-radius: 0.375rem;
		font-size: var(--text-xs);
		font-weight: 500;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
		color: var(--gray-200);
		line-height: 1.5;
		margin: 0;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
	}

	.article-content > :global(* + *) {
		margin-top: 1rem;
	}

	.article-content :global(h1),
	.article-content :global(h2),
	.article-content :global(h3),
	.article-content :global(h4),
	.article-content :global(h5) {
		color: var(--gray-0);
		font-weight: 600;
		line-height: 1.3;
		margin: 2rem 0 1rem 0;
	}

	.article-content :global(h1) { font-size: var(--text-2xl); }
	.article-content :global(h2) { font-size: var(--text-xl); }
	.article-content :global(h3) { font-size: var(--text-lg); }

	.article-content :global(p) {
		line-height: 1.7;
		margin-bottom: 1.5rem;
		color: var(--gray-200);
	}

	.article-content :global(ul),
	.article-content :global(ol) {
		margin-bottom: 1.5rem;
		padding-left: 1.5rem;
		color: var(--gray-200);
	}

	.article-content :global(ul) {
		list-style: disc;
	}

	.article-content :global(ul li) {
		margin-bottom: 0.5rem;
		line-height: 1.6;
	}

	.article-content :global(ul ul),
	.article-content :global(ol ol),
	.article-content :global(ul ol),
	.article-content :global(ol ul) {
		margin-top: 0.25rem;
		margin-bottom: 0.25rem;
	}

	.article-content :global(ul ul li),
	.article-content :global(ol ol li),
	.article-content :global(ul ol li),
	.article-content :global(ol ul li) {
		margin-bottom: 0.25rem;
	}

	.article-content :global(ul li::marker) {
		color: var(--accent-dark);
	}

	:root:not(.theme-dark) .article-content :global(ul li::marker) {
		color: var(--accent-regular);
	}

	.article-content :global(ol) {
		counter-reset: list-counter;
		list-style: none;
	}

	.article-content :global(ol li) {
		position: relative;
		margin-bottom: 0.5rem;
		line-height: 1.6;
		padding-left: 1.5rem;
		counter-increment: list-counter;
	}

	.article-content :global(ol li::before) {
		content: counter(list-counter) '.';
		position: absolute;
		left: 0;
		color: var(--accent-dark);
		font-weight: 600;
		font-family: var(--font-brand);
	}

	:root:not(.theme-dark) .article-content :global(ol li::before) {
		color: var(--accent-regular);
	}

	.article-content :global(table) {
		width: 100%;
		border-collapse: collapse;
		margin: 2rem 0;
		background: var(--gray-900);
		border-radius: 0.5rem;
		overflow: hidden;
		border: 1px solid var(--gray-700);
		box-shadow: var(--shadow-sm);
	}

	.article-content :global(thead) {
		background: var(--gray-800);
	}

	.article-content :global(th) {
		padding: 1rem;
		text-align: left;
		font-weight: 600;
		font-family: var(--font-brand);
		color: var(--gray-0);
		border-bottom: 2px solid var(--gray-700);
		font-size: var(--text-sm);
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.article-content :global(td) {
		padding: 0.75rem 1rem;
		color: var(--gray-200);
		border-bottom: 1px solid var(--gray-800);
		font-size: var(--text-sm);
		line-height: 1.5;
	}

	.article-content :global(tbody tr:last-child td) {
		border-bottom: none;
	}

	.article-content :global(tbody tr:hover) {
		background: var(--gray-800);
	}

	:root:not(.theme-dark) .article-content :global(table) {
		background: var(--gray-999);
		border: 1px solid var(--gray-300);
	}

	:root:not(.theme-dark) .article-content :global(thead) {
		background: var(--gray-700);
	}

	:root:not(.theme-dark) .article-content :global(th) {
		color: var(--gray-0);
		border-bottom: 2px solid var(--gray-300);
	}

	:root:not(.theme-dark) .article-content :global(td) {
		color: var(--gray-0);
		border-bottom: 1px solid var(--gray-300);
	}

	:root:not(.theme-dark) .article-content :global(tbody tr:hover) {
		background: var(--gray-800);
	}

	.article-content :global(img) {
		border-radius: 1rem;
		box-shadow: var(--shadow-md);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
		margin: 2rem 0;
		width: 100%;
		height: auto;
	}

	.article-content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.4;
		padding: 1.5rem;
		margin: 2rem 0;
		background: var(--gray-900);
		border-left: 4px solid var(--accent-regular);
		border-radius: 0 0.5rem 0.5rem 0;
		color: var(--gray-0);
	}

	.article-content :global(pre) {
		background: var(--gray-900) !important;
		padding: 1.5rem;
		border-radius: 0.75rem;
		overflow-x: auto;
		margin: 1.5rem 0;
		border: 1px solid var(--gray-700);
		box-shadow: var(--shadow-sm);
	}

	@media (min-width: 50em) {
		.back-link {
			display: inline-flex;
			align-self: flex-start;
		}

		.details {
			gap: 2rem;
		}

		.article-content :global(blockquote) {
			font-size: var(--text-xl);
			padding: 2rem;
		}
	}
</style>
