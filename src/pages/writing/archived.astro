---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import ArchivedNotice from '../../components/ArchivedNotice.astro';

// Get all archived posts
const archivedPosts = await getCollection('archived_post');

// Sort by date in reverse chronological order (newest first)
const sortedPosts = archivedPosts.sort((a, b) =>
	new Date(b.data.time).getTime() - new Date(a.data.time).getTime()
);

function formatDate(date: Date): string {
	return date.toLocaleDateString('en-US', {
		year: 'numeric',
		month: 'long',
		day: 'numeric'
	});
}

function getArchiveUrl(post: CollectionEntry<'archived_post'>): string {
	const date = new Date(post.data.time);
	const year = date.getFullYear();
	const month = String(date.getMonth() + 1).padStart(2, '0');
	return `/${year}/${month}/${post.data.name}`;
}
---

<BaseLayout title="Archived Posts | Johannes Fahrenkrug" description="Historical posts from Johannes Fahrenkrug's previous blog, preserved for posterity.">
	<div class="stack gap-20">
		<main class="wrapper archived">
			<div class="header-section">
				<a class="back-link" href="/writing/"><Icon icon="arrow-left" /> Writing</a>
				<Hero title="Archived Posts" align="start">
					<div class="details">
						<p class="description">Historical posts from my previous blog, preserved for posterity.</p>
					</div>
				</Hero>
			</div>

			<div class="content-section">
				<ArchivedNotice type="index" />
			</div>

			<section class="posts-section">
				<div class="posts-grid">
					{sortedPosts.map((post) => (
						<article class="archived-article">
							<div class="article-header">
								<h3 class="article-title">
									<a href={getArchiveUrl(post)}>{post.data.title}</a>
								</h3>
								<div class="article-meta">
									<time class="article-date" datetime={post.data.time.toISOString()}>
										{formatDate(post.data.time)}
									</time>
									{post.data.categories && post.data.categories.length > 0 && (
										<div class="article-tags">
											{post.data.categories.map((category) => (
												<span class="tag">{category}</span>
											))}
										</div>
									)}
								</div>
							</div>
						</article>
					))}
				</div>
			</section>
		</main>

		<ContactCTA />
	</div>
</BaseLayout>

<style>
	.archived {
		display: flex;
		flex-direction: column;
		gap: 3rem;
	}

	.header-section {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.back-link {
		color: var(--gray-300);
		text-decoration: none;
		font-size: var(--text-sm);
		font-weight: 500;
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		transition: color var(--theme-transition);
		align-self: flex-start;
	}

	.back-link:hover {
		color: var(--gray-0);
	}

	.details {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
		align-items: flex-start;
	}

	.description {
		font-size: var(--text-lg);
		color: var(--gray-200);
		line-height: 1.5;
		margin: 0;
	}

	.content-section {
		display: flex;
		flex-direction: column;
	}

	.posts-section {
		display: flex;
		flex-direction: column;
	}

	.posts-grid {
		display: flex;
		flex-direction: column;
		gap: 2.5rem;
	}

	.archived-article {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		padding: 1.5rem;
		background: var(--gray-900);
		border: 1px solid var(--gray-700);
		border-radius: 0.75rem;
		transition: border-color var(--theme-transition);
	}

	.archived-article:hover {
		border-color: var(--gray-600);
	}

	.article-header {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.article-title {
		font-size: var(--text-xl);
		line-height: 1.3;
		margin: 0;
	}

	.article-title a {
		color: var(--gray-200);
		text-decoration: none;
		transition: color var(--theme-transition);
	}

	.article-title a:hover {
		color: var(--accent-regular);
	}

	.article-meta {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.article-date {
		font-size: var(--text-base);
		color: var(--gray-400);
		font-family: var(--font-brand);
		font-weight: 500;
	}

	:root:not(.theme-dark) .article-date {
		color: var(--gray-600);
	}

	.article-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.tag {
		background: var(--gray-800);
		color: var(--gray-300);
		padding: 0.25rem 0.75rem;
		border-radius: 0.375rem;
		font-size: var(--text-xs);
		font-weight: 500;
	}

	.article-excerpt {
		color: var(--gray-200);
		line-height: 1.6;
		margin: 0;
	}

	:root:not(.theme-dark) .archived-article {
		background: var(--gray-999);
		border: 1px solid var(--gray-300);
	}

	:root:not(.theme-dark) .archived-article:hover {
		border-color: var(--gray-400);
	}

	:root:not(.theme-dark) .tag {
		background: var(--gray-800);
		color: var(--gray-400);
	}

	:root:not(.theme-dark) .article-title a {
		color: var(--gray-0);
	}

	:root:not(.theme-dark) .article-title a:hover {
		color: var(--accent-regular);
	}

	@media (min-width: 50em) {
		.archived {
			display: grid;
			grid-template-columns: 1fr 60% 1fr;
		}

		.archived > :global(*) {
			grid-column: 2 / 3;
		}

		.details {
			gap: 2rem;
		}

		.article-meta {
			flex-direction: row;
			align-items: center;
			gap: 1rem;
		}
	}
</style>
